/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.text.DateFormatter;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.usermodel.XSSFCell;

import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFRow;

/**
 *
 * @author ac176227
 */
public class ViewGUI extends javax.swing.JFrame
{

    /**
     * Creates new form ViewGUI
     */
    int rowSelected;
    public static final String chx = "x";
        public ViewGUI()
         {
            initComponents();
            
//             jtData.getSelectionModel().addListSelectionListener(new ListSelectionListener()
//             {
//                 @Override
//                 public void valueChanged(ListSelectionEvent event)
//                 {
//                     if (!jtData.getSelectionModel().isSelectionEmpty())
//                     {
//                         int selectedRow = jtData.getSelectionModel().getMinSelectionIndex();
//                         final JPanel panel = new JPanel();
//                         final JRadioButton button1 = new JRadioButton("pre-Calculus A");
//                         final JRadioButton button2 = new JRadioButton("pre-Calculus B");
//
//                         panel.add(button1);
//                         panel.add(button2);
//
//                         JOptionPane.showMessageDialog(null, panel);
//                         //JOptionPane.showMessageDialog(null, "Selected Row" + selectedRow);
//                     }
//                     //System.out.println(jtData.getValueAt(jtData.getSelectedRow(), 0).toString());
//                 }
//
//             });
                        }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jDialoge = new javax.swing.JDialog();
        jButton1 = new javax.swing.JButton();
        lblEng = new javax.swing.JLabel();
        lblMath = new javax.swing.JLabel();
        lblSci = new javax.swing.JLabel();
        lblSS = new javax.swing.JLabel();
        lblHealth = new javax.swing.JLabel();
        lblAth = new javax.swing.JLabel();
        lblTech = new javax.swing.JLabel();
        lblArts = new javax.swing.JLabel();
        lblLang = new javax.swing.JLabel();
        lblSpeech = new javax.swing.JLabel();
        lblTOK = new javax.swing.JLabel();
        eng1A = new javax.swing.JCheckBox();
        eng1B = new javax.swing.JCheckBox();
        eng2A = new javax.swing.JCheckBox();
        eng2B = new javax.swing.JCheckBox();
        eng3A = new javax.swing.JCheckBox();
        eng3B = new javax.swing.JCheckBox();
        eng4A = new javax.swing.JCheckBox();
        eng4B = new javax.swing.JCheckBox();
        algA = new javax.swing.JCheckBox();
        algB = new javax.swing.JCheckBox();
        geomA = new javax.swing.JCheckBox();
        geomB = new javax.swing.JCheckBox();
        alg2A = new javax.swing.JCheckBox();
        alg2B = new javax.swing.JCheckBox();
        slA = new javax.swing.JCheckBox();
        slB = new javax.swing.JCheckBox();
        hlA = new javax.swing.JCheckBox();
        hlB = new javax.swing.JCheckBox();
        hlC = new javax.swing.JCheckBox();
        bioA = new javax.swing.JCheckBox();
        bioB = new javax.swing.JCheckBox();
        chemA = new javax.swing.JCheckBox();
        chemB = new javax.swing.JCheckBox();
        s3A = new javax.swing.JCheckBox();
        s3B = new javax.swing.JCheckBox();
        s3C = new javax.swing.JCheckBox();
        s4A = new javax.swing.JCheckBox();
        s4B = new javax.swing.JCheckBox();
        s4C = new javax.swing.JCheckBox();
        WGA = new javax.swing.JCheckBox();
        WGB = new javax.swing.JCheckBox();
        WHA = new javax.swing.JCheckBox();
        WHB = new javax.swing.JCheckBox();
        HOAA = new javax.swing.JCheckBox();
        HOAB = new javax.swing.JCheckBox();
        CENTA = new javax.swing.JCheckBox();
        CENTB = new javax.swing.JCheckBox();
        ECON = new javax.swing.JCheckBox();
        HLTH = new javax.swing.JCheckBox();
        HSA = new javax.swing.JCheckBox();
        HSB = new javax.swing.JCheckBox();
        HSCIA = new javax.swing.JCheckBox();
        HSCIB = new javax.swing.JCheckBox();
        COS1A = new javax.swing.JCheckBox();
        COS1B = new javax.swing.JCheckBox();
        COS1C = new javax.swing.JCheckBox();
        CMhlthA = new javax.swing.JCheckBox();
        CMhlthB = new javax.swing.JCheckBox();
        athA = new javax.swing.JCheckBox();
        athB = new javax.swing.JCheckBox();
        techA = new javax.swing.JCheckBox();
        techB = new javax.swing.JCheckBox();
        artA = new javax.swing.JCheckBox();
        artB = new javax.swing.JCheckBox();
        bandA = new javax.swing.JCheckBox();
        bandB = new javax.swing.JCheckBox();
        choirA = new javax.swing.JCheckBox();
        choirB = new javax.swing.JCheckBox();
        danceA = new javax.swing.JCheckBox();
        danceB = new javax.swing.JCheckBox();
        orchA = new javax.swing.JCheckBox();
        orchB = new javax.swing.JCheckBox();
        theaterA = new javax.swing.JCheckBox();
        theaterB = new javax.swing.JCheckBox();
        lang1A = new javax.swing.JCheckBox();
        lang1B = new javax.swing.JCheckBox();
        lang2A = new javax.swing.JCheckBox();
        lang2B = new javax.swing.JCheckBox();
        comm = new javax.swing.JCheckBox();
        TOKA = new javax.swing.JCheckBox();
        TOKB = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtData = new javax.swing.JTable();
        panChooser = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblIcon = new javax.swing.JLabel();
        txtSearchBar = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuImport = new javax.swing.JMenuItem();
        mnuCreateDataSheet = new javax.swing.JMenuItem();

        jDialoge.setTitle("Student Info");
        jDialoge.setMinimumSize(new java.awt.Dimension(860, 530));

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        lblEng.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 13)); // NOI18N
        lblEng.setText("English");

        lblMath.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 13)); // NOI18N
        lblMath.setText("Math");

        lblSci.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 13)); // NOI18N
        lblSci.setText("Science");

        lblSS.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 13)); // NOI18N
        lblSS.setText("Social Studies");

        lblHealth.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 13)); // NOI18N
        lblHealth.setText("Health");

        lblAth.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 13)); // NOI18N
        lblAth.setText("PE/Athletics");

        lblTech.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 13)); // NOI18N
        lblTech.setText("Technology");

        lblArts.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 13)); // NOI18N
        lblArts.setText("Fine Arts");

        lblLang.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 13)); // NOI18N
        lblLang.setText("World Lang.");

        lblSpeech.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 13)); // NOI18N
        lblSpeech.setText("Speech");

        lblTOK.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 13)); // NOI18N
        lblTOK.setText("TOK");

        eng1A.setText("1A");
        eng1A.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                eng1AActionPerformed(evt);
            }
        });

        eng1B.setText("1B");
        eng1B.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                eng1BActionPerformed(evt);
            }
        });

        eng2A.setText("2A");
        eng2A.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                eng2AActionPerformed(evt);
            }
        });

        eng2B.setText("2B");
        eng2B.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                eng2BActionPerformed(evt);
            }
        });

        eng3A.setText("3A");
        eng3A.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                eng3AActionPerformed(evt);
            }
        });

        eng3B.setText("3B");
        eng3B.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                eng3BActionPerformed(evt);
            }
        });

        eng4A.setText("4A");
        eng4A.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                eng4AActionPerformed(evt);
            }
        });

        eng4B.setText("4B");
        eng4B.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                eng4BActionPerformed(evt);
            }
        });

        algA.setText("Algebra A");
        algA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                algAActionPerformed(evt);
            }
        });

        algB.setText("B");
        algB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                algBActionPerformed(evt);
            }
        });

        geomA.setText("Geometry A");
        geomA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                geomAActionPerformed(evt);
            }
        });

        geomB.setText("B");
        geomB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                geomBActionPerformed(evt);
            }
        });

        alg2A.setText("Algebra 2A");
        alg2A.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                alg2AActionPerformed(evt);
            }
        });

        alg2B.setText("2B");
        alg2B.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                alg2BActionPerformed(evt);
            }
        });

        slA.setText("SL A");
        slA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                slAActionPerformed(evt);
            }
        });

        slB.setText("SL B");
        slB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                slBActionPerformed(evt);
            }
        });

        hlA.setText("HL A");
        hlA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                hlAActionPerformed(evt);
            }
        });

        hlB.setText("HL B");
        hlB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                hlBActionPerformed(evt);
            }
        });

        hlC.setText("HL C");
        hlC.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                hlCActionPerformed(evt);
            }
        });

        bioA.setText("Bio A");
        bioA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bioAActionPerformed(evt);
            }
        });

        bioB.setText("B");
        bioB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bioBActionPerformed(evt);
            }
        });

        chemA.setText("Chem A");
        chemA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chemAActionPerformed(evt);
            }
        });

        chemB.setText("B");
        chemB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chemBActionPerformed(evt);
            }
        });

        s3A.setText("Sci3 A");
        s3A.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                s3AActionPerformed(evt);
            }
        });

        s3B.setText("Sci3 B");
        s3B.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                s3BActionPerformed(evt);
            }
        });

        s3C.setText("Sci3 C");
        s3C.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                s3CActionPerformed(evt);
            }
        });

        s4A.setText("Sci4 A");
        s4A.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                s4AActionPerformed(evt);
            }
        });

        s4B.setText("Sci4 B");
        s4B.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                s4BActionPerformed(evt);
            }
        });

        s4C.setText("Sci4 C");
        s4C.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                s4CActionPerformed(evt);
            }
        });

        WGA.setText("World Geog. A");
        WGA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                WGAActionPerformed(evt);
            }
        });

        WGB.setText("B");
        WGB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                WGBActionPerformed(evt);
            }
        });

        WHA.setText("World Hist. A");
        WHA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                WHAActionPerformed(evt);
            }
        });

        WHB.setText("B");
        WHB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                WHBActionPerformed(evt);
            }
        });

        HOAA.setText("HOA A");
        HOAA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HOAAActionPerformed(evt);
            }
        });

        HOAB.setText("B");
        HOAB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HOABActionPerformed(evt);
            }
        });

        CENTA.setText("20th Cent. A");
        CENTA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CENTAActionPerformed(evt);
            }
        });

        CENTB.setText("B");
        CENTB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CENTBActionPerformed(evt);
            }
        });

        ECON.setText("Econ AP/IB/Dual");
        ECON.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ECONActionPerformed(evt);
            }
        });

        HLTH.setText("Health");
        HLTH.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HLTHActionPerformed(evt);
            }
        });

        HSA.setText("Hum. Service A");
        HSA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HSAActionPerformed(evt);
            }
        });

        HSB.setText("B");
        HSB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HSBActionPerformed(evt);
            }
        });

        HSCIA.setText("Health Sci. A");
        HSCIA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HSCIAActionPerformed(evt);
            }
        });

        HSCIB.setText("B");
        HSCIB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                HSCIBActionPerformed(evt);
            }
        });

        COS1A.setText("Cosmo1 A");
        COS1A.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                COS1AActionPerformed(evt);
            }
        });

        COS1B.setText("B");
        COS1B.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                COS1BActionPerformed(evt);
            }
        });

        COS1C.setText("C");
        COS1C.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                COS1CActionPerformed(evt);
            }
        });

        CMhlthA.setText("Coun/Men's Hlth. A");
        CMhlthA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CMhlthAActionPerformed(evt);
            }
        });

        CMhlthB.setText("B");
        CMhlthB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CMhlthBActionPerformed(evt);
            }
        });

        athA.setText("PE/Athletics A");
        athA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                athAActionPerformed(evt);
            }
        });

        athB.setText("PE/Athletics B");
        athB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                athBActionPerformed(evt);
            }
        });

        techA.setText("Tech A");
        techA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                techAActionPerformed(evt);
            }
        });

        techB.setText("Tech B");
        techB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                techBActionPerformed(evt);
            }
        });

        artA.setText("Art A");
        artA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                artAActionPerformed(evt);
            }
        });

        artB.setText("B");
        artB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                artBActionPerformed(evt);
            }
        });

        bandA.setText("Band A");
        bandA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bandAActionPerformed(evt);
            }
        });

        bandB.setText("B");
        bandB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bandBActionPerformed(evt);
            }
        });

        choirA.setText("Choir A");
        choirA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                choirAActionPerformed(evt);
            }
        });

        choirB.setText("B");
        choirB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                choirBActionPerformed(evt);
            }
        });

        danceA.setText("Dance A");
        danceA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                danceAActionPerformed(evt);
            }
        });

        danceB.setText("B");
        danceB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                danceBActionPerformed(evt);
            }
        });

        orchA.setText("Orch. A");
        orchA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                orchAActionPerformed(evt);
            }
        });

        orchB.setText("B");
        orchB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                orchBActionPerformed(evt);
            }
        });

        theaterA.setText("Theater A");
        theaterA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                theaterAActionPerformed(evt);
            }
        });

        theaterB.setText("B");
        theaterB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                theaterBActionPerformed(evt);
            }
        });

        lang1A.setText("Lang1 A");
        lang1A.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                lang1AActionPerformed(evt);
            }
        });

        lang1B.setText("B");
        lang1B.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                lang1BActionPerformed(evt);
            }
        });

        lang2A.setText("Lang2 A");
        lang2A.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                lang2AActionPerformed(evt);
            }
        });

        lang2B.setText("B");
        lang2B.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                lang2BActionPerformed(evt);
            }
        });

        comm.setText("Prof. Comm.");
        comm.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                commActionPerformed(evt);
            }
        });

        TOKA.setText("A");
        TOKA.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                TOKAActionPerformed(evt);
            }
        });

        TOKB.setText("B");
        TOKB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                TOKBActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Light", 1, 13)); // NOI18N
        jLabel1.setText("Student Classes");

        javax.swing.GroupLayout jDialogeLayout = new javax.swing.GroupLayout(jDialoge.getContentPane());
        jDialoge.getContentPane().setLayout(jDialogeLayout);
        jDialogeLayout.setHorizontalGroup(
            jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialogeLayout.createSequentialGroup()
                        .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDialogeLayout.createSequentialGroup()
                                .addComponent(lblSci)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bioA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bioB)
                                .addGap(18, 18, 18)
                                .addComponent(chemA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chemB)
                                .addGap(18, 18, 18)
                                .addComponent(s3A)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(s3B)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(s3C)
                                .addGap(18, 18, 18)
                                .addComponent(s4A)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(s4B)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(s4C))
                            .addGroup(jDialogeLayout.createSequentialGroup()
                                .addComponent(lblArts)
                                .addGap(18, 18, 18)
                                .addComponent(artA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(artB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bandA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bandB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(choirA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(choirB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(danceA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(danceB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(orchA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(orchB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(theaterA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(theaterB))
                            .addGroup(jDialogeLayout.createSequentialGroup()
                                .addComponent(lblTOK)
                                .addGap(18, 18, 18)
                                .addComponent(TOKA)
                                .addGap(18, 18, 18)
                                .addComponent(TOKB))
                            .addGroup(jDialogeLayout.createSequentialGroup()
                                .addComponent(lblHealth)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(HLTH)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(HSA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HSB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(HSCIA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HSCIB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(COS1A)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(COS1B)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(COS1C)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CMhlthA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CMhlthB))
                            .addGroup(jDialogeLayout.createSequentialGroup()
                                .addComponent(lblMath)
                                .addGap(18, 18, 18)
                                .addComponent(algA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(algB)
                                .addGap(18, 18, 18)
                                .addComponent(geomA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(geomB)
                                .addGap(18, 18, 18)
                                .addComponent(alg2A)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(alg2B)
                                .addGap(18, 18, 18)
                                .addComponent(slA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(slB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(hlA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hlB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hlC))
                            .addGroup(jDialogeLayout.createSequentialGroup()
                                .addComponent(lblSS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WGA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WGB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(WHA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WHB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(HOAA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HOAB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CENTA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CENTB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ECON))
                            .addGroup(jDialogeLayout.createSequentialGroup()
                                .addComponent(lblAth)
                                .addGap(18, 18, 18)
                                .addComponent(athA)
                                .addGap(18, 18, 18)
                                .addComponent(athB))
                            .addGroup(jDialogeLayout.createSequentialGroup()
                                .addComponent(lblEng)
                                .addGap(33, 33, 33)
                                .addComponent(eng1A)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eng1B)
                                .addGap(24, 24, 24)
                                .addComponent(eng2A)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eng2B)
                                .addGap(24, 24, 24)
                                .addComponent(eng3A)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eng3B)
                                .addGap(27, 27, 27)
                                .addComponent(eng4A)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eng4B)))
                        .addGap(0, 28, Short.MAX_VALUE))
                    .addGroup(jDialogeLayout.createSequentialGroup()
                        .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogeLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton1))
                            .addGroup(jDialogeLayout.createSequentialGroup()
                                .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jDialogeLayout.createSequentialGroup()
                                        .addComponent(lblLang)
                                        .addGap(18, 18, 18)
                                        .addComponent(lang1A)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lang1B)
                                        .addGap(18, 18, 18)
                                        .addComponent(lang2A)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lang2B))
                                    .addGroup(jDialogeLayout.createSequentialGroup()
                                        .addComponent(lblTech)
                                        .addGap(18, 18, 18)
                                        .addComponent(techA)
                                        .addGap(18, 18, 18)
                                        .addComponent(techB))
                                    .addGroup(jDialogeLayout.createSequentialGroup()
                                        .addComponent(lblSpeech)
                                        .addGap(18, 18, 18)
                                        .addComponent(comm)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(356, 356, 356))
        );
        jDialogeLayout.setVerticalGroup(
            jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogeLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEng)
                    .addComponent(eng1A)
                    .addComponent(eng1B)
                    .addComponent(eng2A)
                    .addComponent(eng2B)
                    .addComponent(eng3A)
                    .addComponent(eng3B)
                    .addComponent(eng4A)
                    .addComponent(eng4B))
                .addGap(18, 18, 18)
                .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMath)
                    .addComponent(algA)
                    .addComponent(algB)
                    .addComponent(geomA)
                    .addComponent(geomB)
                    .addComponent(alg2A)
                    .addComponent(alg2B)
                    .addComponent(slA)
                    .addComponent(slB)
                    .addComponent(hlA)
                    .addComponent(hlB)
                    .addComponent(hlC))
                .addGap(18, 18, 18)
                .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSci)
                    .addComponent(bioA)
                    .addComponent(bioB)
                    .addComponent(chemA)
                    .addComponent(chemB)
                    .addComponent(s3A)
                    .addComponent(s3B)
                    .addComponent(s3C)
                    .addComponent(s4A)
                    .addComponent(s4B)
                    .addComponent(s4C))
                .addGap(18, 18, 18)
                .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSS)
                    .addComponent(WGA)
                    .addComponent(WGB)
                    .addComponent(WHA)
                    .addComponent(WHB)
                    .addComponent(HOAA)
                    .addComponent(HOAB)
                    .addComponent(CENTA)
                    .addComponent(CENTB)
                    .addComponent(ECON))
                .addGap(18, 18, 18)
                .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHealth)
                    .addComponent(HLTH)
                    .addComponent(HSA)
                    .addComponent(HSB)
                    .addComponent(HSCIA)
                    .addComponent(HSCIB)
                    .addComponent(COS1A)
                    .addComponent(COS1B)
                    .addComponent(COS1C)
                    .addComponent(CMhlthA)
                    .addComponent(CMhlthB))
                .addGap(18, 18, 18)
                .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAth)
                    .addComponent(athA)
                    .addComponent(athB))
                .addGap(18, 18, 18)
                .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTech)
                    .addComponent(techA)
                    .addComponent(techB))
                .addGap(18, 18, 18)
                .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblArts)
                    .addComponent(artA)
                    .addComponent(artB)
                    .addComponent(bandA)
                    .addComponent(bandB)
                    .addComponent(choirA)
                    .addComponent(choirB)
                    .addComponent(danceA)
                    .addComponent(danceB)
                    .addComponent(orchA)
                    .addComponent(orchB)
                    .addComponent(theaterA)
                    .addComponent(theaterB))
                .addGap(18, 18, 18)
                .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLang)
                    .addComponent(lang1A)
                    .addComponent(lang1B)
                    .addComponent(lang2A)
                    .addComponent(lang2B))
                .addGap(18, 18, 18)
                .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSpeech)
                    .addComponent(comm))
                .addGap(18, 18, 18)
                .addGroup(jDialogeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTOK)
                    .addComponent(TOKA)
                    .addComponent(TOKB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IB Sophomores dbs");
        setBackground(new java.awt.Color(219, 237, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jtData.setBackground(new java.awt.Color(204, 233, 247));
        jtData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "ID ", "Name"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        jtData.getTableHeader().setReorderingAllowed(false);
        jtData.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jtDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtData);
        if (jtData.getColumnModel().getColumnCount() > 0)
        {
            jtData.getColumnModel().getColumn(0).setResizable(false);
            jtData.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout panChooserLayout = new javax.swing.GroupLayout(panChooser);
        panChooser.setLayout(panChooserLayout);
        panChooserLayout.setHorizontalGroup(
            panChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );
        panChooserLayout.setVerticalGroup(
            panChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 17, Short.MAX_VALUE)
        );

        lblTitle.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 1, 18)); // NOI18N
        lblTitle.setText("Incoming IB Sophomores");

        lblIcon.setIcon(new javax.swing.ImageIcon("H:\\Comp sci IA\\Webp.net-resizeimage.png")); // NOI18N
        lblIcon.setText("ib");

        txtSearchBar.setForeground(new java.awt.Color(0, 0, 0));
        txtSearchBar.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                txtSearchBarKeyReleased(evt);
            }
        });

        jMenu1.setText("File");

        mnuImport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        mnuImport.setText("Import File");
        mnuImport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuImportActionPerformed(evt);
            }
        });
        jMenu1.add(mnuImport);

        mnuCreateDataSheet.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        mnuCreateDataSheet.setText("Create Data Sheet");
        mnuCreateDataSheet.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mnuCreateDataSheetActionPerformed(evt);
            }
        });
        jMenu1.add(mnuCreateDataSheet);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(114, 114, 114)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(143, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblIcon)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblTitle)
                        .addComponent(txtSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(panChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuImportActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mnuImportActionPerformed
    {//GEN-HEADEREND:event_mnuImportActionPerformed
     JFileChooser chooser = new JFileChooser();
     FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel files", "xlsx");
     chooser.setFileFilter(filter);
     int returnVal = chooser.showOpenDialog(panChooser);
     if(returnVal == JFileChooser.APPROVE_OPTION)
     {
        try {
      
         String name;
         int IDNumber;
         XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(chooser.getSelectedFile().getAbsolutePath()));
         XSSFSheet sheet = workbook.getSheetAt(0);  //this gets first sheet in workbook

         XSSFRow row;
         for(int r = 1; r < sheet.getLastRowNum()+1 ; r++)                 //rows start at 0, so do cells
         {
           row = sheet.getRow(r);
           name = row.getCell(0).getStringCellValue();   //assumes first cell is a String
           IDNumber = (int) row.getCell(1).getNumericCellValue();  //fourth cell is an int

           //System.out.printf("Name : %s\n", name);  //output what you read from excel
           //System.out.printf("ID : %d\n", IDNumber);
           //System.out.println();
          //following code connects table to excel file
           DefaultTableModel model = (DefaultTableModel) jtData.getModel();
           model.addRow(new Object [] {IDNumber, name});
      }
    } catch(IOException e){}
    }
    }//GEN-LAST:event_mnuImportActionPerformed

    private void mnuCreateDataSheetActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mnuCreateDataSheetActionPerformed
    {//GEN-HEADEREND:event_mnuCreateDataSheetActionPerformed
     File file = new File("newfile.xlsx");
     JFileChooser chooser = new JFileChooser();
     FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel files", "xlsx");
     chooser.setFileFilter(filter);
     int returnVal = chooser.showOpenDialog(panChooser);
     if(returnVal == JFileChooser.APPROVE_OPTION)
        try
        {
          FileInputStream fis = new FileInputStream(new File(chooser.getSelectedFile().getAbsolutePath()));
		XSSFWorkbook workbook = new XSSFWorkbook (fis);
		XSSFSheet sheet = workbook.getSheetAt(0);
                
		/*------------------
                  Creates First Row
                --------------------*/
                
                //English
		XSSFRow row1 = sheet.createRow(0);
		XSSFCell r1c1 = row1.createCell(2);
		r1c1.setCellValue("ENG 1A");
		XSSFCell r1c2 = row1.createCell(3);
		r1c2.setCellValue("ENG 1B");
		XSSFCell r1c3 = row1.createCell(4);
		r1c3.setCellValue("ENG 2A");
                XSSFCell r1c4 = row1.createCell(5);
		r1c4.setCellValue("ENG 2B");
                XSSFCell r1c5 = row1.createCell(6);
		r1c5.setCellValue("ENG 3A");
                XSSFCell r1c6 = row1.createCell(7);
		r1c6.setCellValue("ENG 3B");
                XSSFCell r1c7 = row1.createCell(8);
		r1c7.setCellValue("ENG 4A");
                XSSFCell r1c8 = row1.createCell(9);
		r1c8.setCellValue("ENG 4B");
                
                //Math 
                XSSFCell r1c9 = row1.createCell(10);
		r1c9.setCellValue("ALG A");
                XSSFCell r1c10 = row1.createCell(11);
		r1c10.setCellValue("ALG B");
                XSSFCell r1c11= row1.createCell(12);
		r1c11.setCellValue("GEOM A");
                XSSFCell r1c12= row1.createCell(13);
		r1c12.setCellValue("GEOM B");
                XSSFCell r1c13 = row1.createCell(14);
		r1c13.setCellValue("ALG2 A");
                XSSFCell r1c14 = row1.createCell(15);
		r1c14.setCellValue("ALG2 B");
                XSSFCell r1c15 = row1.createCell(16);
		r1c15.setCellValue("SLMATH A");
                XSSFCell r1c16 = row1.createCell(17);
		r1c16.setCellValue("SLMATH B");
                XSSFCell r1c17 = row1.createCell(18);
		r1c17.setCellValue("HLMATCH A");
                XSSFCell r1c18 = row1.createCell(19);
		r1c18.setCellValue("HLMATH B");
                XSSFCell r1c19 = row1.createCell(20);
		r1c19.setCellValue("HLMATH C");
                
                //Science 
                XSSFCell r1c20 = row1.createCell(21);
		r1c20.setCellValue("BIO A");
                XSSFCell r1c21 = row1.createCell(22);
		r1c21.setCellValue("BIO B");
                XSSFCell r1c22 = row1.createCell(23);
		r1c22.setCellValue("CHEM A");
                XSSFCell r1c23 = row1.createCell(24);
		r1c23.setCellValue("CHEM B");
                XSSFCell r1c24 = row1.createCell(25);
		r1c24.setCellValue("SCI3 A");
                XSSFCell r1c25 = row1.createCell(26);
		r1c25.setCellValue("SCI3 B");
                XSSFCell r1c26 = row1.createCell(27);
		r1c26.setCellValue("SCI3 C");
                XSSFCell r1c27 = row1.createCell(28);
		r1c27.setCellValue("SCI4 A");
                XSSFCell r1c28 = row1.createCell(29);
		r1c28.setCellValue("SCI4 B");
                XSSFCell r1c29 = row1.createCell(30);
		r1c29.setCellValue("SCI4 C");
                
                //Social Studies
                XSSFCell r1c30 = row1.createCell(31);
                r1c30.setCellValue("WORLD GEO A");
                XSSFCell r1c31 = row1.createCell(32);
                r1c31.setCellValue("WORLD GEO B");
                XSSFCell r1c32 = row1.createCell(33);
                r1c32.setCellValue("WORLD HIST A");
                XSSFCell r1c33 = row1.createCell(34);
                r1c33.setCellValue("WORLD HIST B");
                XSSFCell r1c34 = row1.createCell(35);
                r1c34.setCellValue("HOA A");
                XSSFCell r1c35 = row1.createCell(36);
                r1c35.setCellValue("HOA B");
                XSSFCell r1c36 = row1.createCell(37);
                r1c36.setCellValue("2OTH CENTURY A");
                XSSFCell r1c37 = row1.createCell(38);
                r1c37.setCellValue("20TH CENTURY B");
                XSSFCell r1c38 = row1.createCell(39);
                r1c38.setCellValue("ECON AP/IB/DUAL");
                
                //Health
                XSSFCell r1c39 = row1.createCell(40);
                r1c39.setCellValue("HEALTH");
                XSSFCell r1c40 = row1.createCell(41);
                r1c40.setCellValue("HUM SERVICE A");
                XSSFCell r1c41 = row1.createCell(42);
                r1c41.setCellValue("HUM SERVICE B");
                XSSFCell r1c42 = row1.createCell(43);
                r1c42.setCellValue("HLTH SCIENCE A");
                XSSFCell r1c43 = row1.createCell(44);
                r1c43.setCellValue("HLTH SCIENCE B");
                XSSFCell r1c44 = row1.createCell(45);
                r1c44.setCellValue("COSMO1 A");
                XSSFCell r1c45 = row1.createCell(46);
                r1c45.setCellValue("COSMO1 B");
                XSSFCell r1c46 = row1.createCell(47);
                r1c46.setCellValue("COSMO1 C");
                XSSFCell r1c47 = row1.createCell(48);
                r1c47.setCellValue("COUN/MEN HLTH A");
                XSSFCell r1c48 = row1.createCell(49);
                r1c48.setCellValue("COUN/MEN HLTH B");
                
                //PE/Athletics
                XSSFCell r1c49 = row1.createCell(50);
                r1c49.setCellValue("PE/ATHLT A");
                XSSFCell r1c50 = row1.createCell(51);
                r1c50.setCellValue("PE/ATHLT B");
                
                //Technology
                XSSFCell r1c51 = row1.createCell(52);
                r1c51.setCellValue("TECH A");
                XSSFCell r1c52 = row1.createCell(53);
                r1c52.setCellValue("TECH B");
                
                //Fine Arts
                XSSFCell r1c53 = row1.createCell(54);
                r1c53.setCellValue("ART A");
                XSSFCell r1c54 = row1.createCell(55);
                r1c54.setCellValue("ART B");
                XSSFCell r1c55 = row1.createCell(56);
                r1c55.setCellValue("BAND A");
                XSSFCell r1c56 = row1.createCell(57);
                r1c56.setCellValue("BAND B");
                XSSFCell r1c57 = row1.createCell(58);
                r1c57.setCellValue("CHOIR A");
                XSSFCell r1c58 = row1.createCell(59);
                r1c58.setCellValue("CHOIR B");
                XSSFCell r1c59 = row1.createCell(60);
                r1c59.setCellValue("DANCE A");
                XSSFCell r1c60 = row1.createCell(61);
                r1c60.setCellValue("DANCE B");
                XSSFCell r1c61 = row1.createCell(62);
                r1c61.setCellValue("ORCH A");
                XSSFCell r1c62 = row1.createCell(63);
                r1c62.setCellValue("ORCH B");
                XSSFCell r1c63 = row1.createCell(64);
                r1c63.setCellValue("THEATER A");
                XSSFCell r1c64 = row1.createCell(65);
                r1c64.setCellValue("THEATER B");
                
                //World Languages
                XSSFCell r1c65 = row1.createCell(66);
                r1c65.setCellValue("LANG1 A");
                XSSFCell r1c66 = row1.createCell(67);
                r1c66.setCellValue("LANG1 B");
                XSSFCell r1c67 = row1.createCell(68);
                r1c67.setCellValue("LANG2 A");
                XSSFCell r1c68 = row1.createCell(69);
                r1c68.setCellValue("LANG2 B");
                
                //Speech
                XSSFCell r1c69 = row1.createCell(70);
                r1c69.setCellValue("PROF COMM");
                
                //TOK (Theory of Knowledge)
                XSSFCell r1c70 = row1.createCell(71);
                r1c70.setCellValue("TOK A");
                XSSFCell r1c71 = row1.createCell(72);
                r1c71.setCellValue("TOK B");
                
		fis.close();
		FileOutputStream fos =new FileOutputStream(new File("newfile.xlsx"));
	        workbook.write(fos);
	        fos.close();
		System.out.println("Done");
            
        } catch(IOException e){
                System.out.println(e);
                }
    }//GEN-LAST:event_mnuCreateDataSheetActionPerformed

    private void filter(String query)
    {
      TableRowSorter<DefaultTableModel> tr = new TableRowSorter<> ((DefaultTableModel) jtData.getModel());
      jtData.setRowSorter(tr); 
      tr.setRowFilter(RowFilter.regexFilter("(?i)"+query));
    }
    
    private void txtSearchBarKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtSearchBarKeyReleased
    {//GEN-HEADEREND:event_txtSearchBarKeyReleased
        String query = txtSearchBar.getText();
        filter(query); 
    }//GEN-LAST:event_txtSearchBarKeyReleased
    public void clearDialoge()
    {
       JCheckBox [] boxes = new JCheckBox[71];
       boxes [0] = eng1A;
       boxes [1] = eng1B;
       boxes [2] = eng2A;
       boxes [3] = eng2B;
       boxes [4] = eng3A;
       boxes [5] = eng3B;
       boxes [6] = eng4A;
       boxes [7] = eng4B;
       boxes [8] = algA;
       boxes [9] = algB;
       boxes [10] = geomA;
       boxes [11] = geomB;
       boxes [12] = alg2A;
       boxes [13] = alg2B;
       boxes [14] = slA;
       boxes [15] = slB;
       boxes [16] = hlA;
       boxes [17] = hlB;
       boxes [18] = hlC;
       boxes [19] = bioA;
       boxes [20] = bioB;
       boxes [21] = chemA;
       boxes [22] = chemB;
       boxes [23] = s3A;
       boxes [24] = s3B;
       boxes [25] = s3C;
       boxes [26] = s4A;
       boxes [27] = s4B;
       boxes [28] = s4C;
       boxes [29] = WGA;
       boxes [30] = WGB;
       boxes [31] = WHA;
       boxes [32] = WHB;
       boxes [33] = HOAA;
       boxes [34] = HOAB;
       boxes [35] = CENTA;
       boxes [36] = CENTB;
       boxes [37] = ECON;
       boxes [38] = HLTH;
       boxes [39] = HSA;
       boxes [40] = HSB;
       boxes [41] = HSCIA;
       boxes [42] = HSCIB;
       boxes [43] = COS1A;
       boxes [44] = COS1B;
       boxes [45] = COS1C;
       boxes [46] = CMhlthA;
       boxes [47] = CMhlthB;
       boxes [48] = athA;
       boxes [49] = athB;
       boxes [50] = techA;
       boxes [51] = techB;
       boxes [52] = artA;
       boxes [53] = artB;
       boxes [54] = bandA;
       boxes [55] = bandB;
       boxes [56] = choirA;
       boxes [57] = choirB;
       boxes [58] = danceA;
       boxes [59] = danceB;
       boxes [60] = orchA;
       boxes [61] = orchB;
       boxes [62] = theaterA;
       boxes [63] = theaterB;
       boxes [64] = lang1A;
       boxes [65] = lang1B;
       boxes [66] = lang2A;
       boxes [67] = lang2B;
       boxes [68] = comm;
       boxes [69] = TOKA;
       boxes [70] = TOKB;
       
       for(int x = 0; x < boxes.length; x++)
           boxes[x].setSelected(false);

       
       
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        jDialoge.dispose();
        clearDialoge();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jtDataMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jtDataMouseClicked
    {//GEN-HEADEREND:event_jtDataMouseClicked
       clearDialoge();
        int rowIndex = jtData.rowAtPoint(evt.getPoint());
       rowSelected = rowIndex+1;
       JCheckBox [] boxes = new JCheckBox[71];
       boxes [0] = eng1A;
       boxes [1] = eng1B;
       boxes [2] = eng2A;
       boxes [3] = eng2B;
       boxes [4] = eng3A;
       boxes [5] = eng3B;
       boxes [6] = eng4A;
       boxes [7] = eng4B;
       boxes [8] = algA;
       boxes [9] = algB;
       boxes [10] = geomA;
       boxes [11] = geomB;
       boxes [12] = alg2A;
       boxes [13] = alg2B;
       boxes [14] = slA;
       boxes [15] = slB;
       boxes [16] = hlA;
       boxes [17] = hlB;
       boxes [18] = hlC;
       boxes [19] = bioA;
       boxes [20] = bioB;
       boxes [21] = chemA;
       boxes [22] = chemB;
       boxes [23] = s3A;
       boxes [24] = s3B;
       boxes [25] = s3C;
       boxes [26] = s4A;
       boxes [27] = s4B;
       boxes [28] = s4C;
       boxes [29] = WGA;
       boxes [30] = WGB;
       boxes [31] = WHA;
       boxes [32] = WHB;
       boxes [33] = HOAA;
       boxes [34] = HOAB;
       boxes [35] = CENTA;
       boxes [36] = CENTB;
       boxes [37] = ECON;
       boxes [38] = HLTH;
       boxes [39] = HSA;
       boxes [40] = HSB;
       boxes [41] = HSCIA;
       boxes [42] = HSCIB;
       boxes [43] = COS1A;
       boxes [44] = COS1B;
       boxes [45] = COS1C;
       boxes [46] = CMhlthA;
       boxes [47] = CMhlthB;
       boxes [48] = athA;
       boxes [49] = athB;
       boxes [50] = techA;
       boxes [51] = techB;
       boxes [52] = artA;
       boxes [53] = artB;
       boxes [54] = bandA;
       boxes [55] = bandB;
       boxes [56] = choirA;
       boxes [57] = choirB;
       boxes [58] = danceA;
       boxes [59] = danceB;
       boxes [60] = orchA;
       boxes [61] = orchB;
       boxes [62] = theaterA;
       boxes [63] = theaterB;
       boxes [64] = lang1A;
       boxes [65] = lang1B;
       boxes [66] = lang2A;
       boxes [67] = lang2B;
       boxes [68] = comm;
       boxes [69] = TOKA;
       boxes [70] = TOKB;
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            for (int x=0;x < boxes.length;x++){
                XSSFCell cell = row.getCell(x+2);
                if(cell.getStringCellValue().equals(chx)) 
                {
                    boxes[x].setSelected(true);
                }
            }
        } catch(Exception e){System.out.println(e + "u suck");}
        
        jDialoge.setVisible(true);
    }//GEN-LAST:event_jtDataMouseClicked

    private void eng1AActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_eng1AActionPerformed
    {//GEN-HEADEREND:event_eng1AActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(2);
            if(eng1A.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_eng1AActionPerformed

    private void eng1BActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_eng1BActionPerformed
    {//GEN-HEADEREND:event_eng1BActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(3);
            if(eng1B.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_eng1BActionPerformed

    private void eng2AActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_eng2AActionPerformed
    {//GEN-HEADEREND:event_eng2AActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(4);
            if(eng2A.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_eng2AActionPerformed

    private void eng2BActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_eng2BActionPerformed
    {//GEN-HEADEREND:event_eng2BActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(5);
            if(eng2B.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_eng2BActionPerformed

    private void eng3AActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_eng3AActionPerformed
    {//GEN-HEADEREND:event_eng3AActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(6);
            if(eng3A.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_eng3AActionPerformed

    private void eng3BActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_eng3BActionPerformed
    {//GEN-HEADEREND:event_eng3BActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(7);
            if(eng3B.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_eng3BActionPerformed

    private void eng4AActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_eng4AActionPerformed
    {//GEN-HEADEREND:event_eng4AActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(8);
            if(eng4A.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_eng4AActionPerformed

    private void eng4BActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_eng4BActionPerformed
    {//GEN-HEADEREND:event_eng4BActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(9);
            if(eng4B.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_eng4BActionPerformed

    private void algAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_algAActionPerformed
    {//GEN-HEADEREND:event_algAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(10);
            if(algA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_algAActionPerformed

    private void algBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_algBActionPerformed
    {//GEN-HEADEREND:event_algBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(11);
            if(algB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_algBActionPerformed

    private void geomAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_geomAActionPerformed
    {//GEN-HEADEREND:event_geomAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(12);
            if(geomA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_geomAActionPerformed

    private void geomBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_geomBActionPerformed
    {//GEN-HEADEREND:event_geomBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(13);
            if(geomB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_geomBActionPerformed

    private void alg2AActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_alg2AActionPerformed
    {//GEN-HEADEREND:event_alg2AActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(14);
            if(alg2A.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_alg2AActionPerformed

    private void alg2BActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_alg2BActionPerformed
    {//GEN-HEADEREND:event_alg2BActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(15);
            if(alg2B.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_alg2BActionPerformed

    private void slAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_slAActionPerformed
    {//GEN-HEADEREND:event_slAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(16);
            if(slA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_slAActionPerformed

    private void slBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_slBActionPerformed
    {//GEN-HEADEREND:event_slBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(17);
            if(slB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_slBActionPerformed

    private void hlAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_hlAActionPerformed
    {//GEN-HEADEREND:event_hlAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(18);
            if(hlA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_hlAActionPerformed

    private void hlBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_hlBActionPerformed
    {//GEN-HEADEREND:event_hlBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(19);
            if(hlB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_hlBActionPerformed

    private void hlCActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_hlCActionPerformed
    {//GEN-HEADEREND:event_hlCActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(20);
            if(hlC.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_hlCActionPerformed

    private void bioAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bioAActionPerformed
    {//GEN-HEADEREND:event_bioAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(21);
            if(bioA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_bioAActionPerformed

    private void bioBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bioBActionPerformed
    {//GEN-HEADEREND:event_bioBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(22);
            if(bioB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_bioBActionPerformed

    private void chemAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chemAActionPerformed
    {//GEN-HEADEREND:event_chemAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(23);
            if(chemA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_chemAActionPerformed

    private void chemBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chemBActionPerformed
    {//GEN-HEADEREND:event_chemBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(24);
            if(chemB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_chemBActionPerformed

    private void s3AActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_s3AActionPerformed
    {//GEN-HEADEREND:event_s3AActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(25);
            if(s3A.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_s3AActionPerformed

    private void s3BActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_s3BActionPerformed
    {//GEN-HEADEREND:event_s3BActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(26);
            if(s3B.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_s3BActionPerformed

    private void s3CActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_s3CActionPerformed
    {//GEN-HEADEREND:event_s3CActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(27);
            if(s3C.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_s3CActionPerformed

    private void s4AActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_s4AActionPerformed
    {//GEN-HEADEREND:event_s4AActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(28);
            if(s4A.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_s4AActionPerformed

    private void s4BActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_s4BActionPerformed
    {//GEN-HEADEREND:event_s4BActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(29);
            if(s4B.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_s4BActionPerformed

    private void s4CActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_s4CActionPerformed
    {//GEN-HEADEREND:event_s4CActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(30);
            if(s4C.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_s4CActionPerformed

    private void WGAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_WGAActionPerformed
    {//GEN-HEADEREND:event_WGAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(31);
            if(WGA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_WGAActionPerformed

    private void WGBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_WGBActionPerformed
    {//GEN-HEADEREND:event_WGBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(32);
            if(WGB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_WGBActionPerformed

    private void WHAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_WHAActionPerformed
    {//GEN-HEADEREND:event_WHAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(33);
            if(WHA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_WHAActionPerformed

    private void WHBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_WHBActionPerformed
    {//GEN-HEADEREND:event_WHBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(34);
            if(WHB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_WHBActionPerformed

    private void HOAAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HOAAActionPerformed
    {//GEN-HEADEREND:event_HOAAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(35);
            if(HOAA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_HOAAActionPerformed

    private void HOABActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HOABActionPerformed
    {//GEN-HEADEREND:event_HOABActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(36);
            if(HOAB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_HOABActionPerformed

    private void CENTAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CENTAActionPerformed
    {//GEN-HEADEREND:event_CENTAActionPerformed
       try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(37);
            if(CENTA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_CENTAActionPerformed

    private void CENTBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CENTBActionPerformed
    {//GEN-HEADEREND:event_CENTBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(38);
            if(CENTB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_CENTBActionPerformed

    private void ECONActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ECONActionPerformed
    {//GEN-HEADEREND:event_ECONActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(39);
            if(ECON.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_ECONActionPerformed

    private void HLTHActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HLTHActionPerformed
    {//GEN-HEADEREND:event_HLTHActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(40);
            if(HLTH.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_HLTHActionPerformed

    private void HSAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HSAActionPerformed
    {//GEN-HEADEREND:event_HSAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(41);
            if(HSA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_HSAActionPerformed

    private void HSBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HSBActionPerformed
    {//GEN-HEADEREND:event_HSBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(42);
            if(HSB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_HSBActionPerformed

    private void HSCIAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HSCIAActionPerformed
    {//GEN-HEADEREND:event_HSCIAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(43);
            if(HSCIA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_HSCIAActionPerformed

    private void HSCIBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_HSCIBActionPerformed
    {//GEN-HEADEREND:event_HSCIBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(44);
            if(HSCIB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_HSCIBActionPerformed

    private void COS1AActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_COS1AActionPerformed
    {//GEN-HEADEREND:event_COS1AActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(45);
            if(COS1A.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_COS1AActionPerformed

    private void COS1BActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_COS1BActionPerformed
    {//GEN-HEADEREND:event_COS1BActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(46);
            if(COS1B.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_COS1BActionPerformed

    private void COS1CActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_COS1CActionPerformed
    {//GEN-HEADEREND:event_COS1CActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(47);
            if(COS1C.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_COS1CActionPerformed

    private void CMhlthAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CMhlthAActionPerformed
    {//GEN-HEADEREND:event_CMhlthAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(48);
            if(CMhlthA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_CMhlthAActionPerformed

    private void CMhlthBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CMhlthBActionPerformed
    {//GEN-HEADEREND:event_CMhlthBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(49);
            if(CMhlthB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_CMhlthBActionPerformed

    private void athAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_athAActionPerformed
    {//GEN-HEADEREND:event_athAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(50);
            if(athA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_athAActionPerformed

    private void athBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_athBActionPerformed
    {//GEN-HEADEREND:event_athBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(51);
            if(athB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_athBActionPerformed

    private void techAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_techAActionPerformed
    {//GEN-HEADEREND:event_techAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(52);
            if(techA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_techAActionPerformed

    private void techBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_techBActionPerformed
    {//GEN-HEADEREND:event_techBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(53);
            if(techB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_techBActionPerformed

    private void artAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_artAActionPerformed
    {//GEN-HEADEREND:event_artAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(54);
            if(artA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_artAActionPerformed

    private void artBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_artBActionPerformed
    {//GEN-HEADEREND:event_artBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(55);
            if(artB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_artBActionPerformed

    private void bandAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bandAActionPerformed
    {//GEN-HEADEREND:event_bandAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(56);
            if(bandA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_bandAActionPerformed

    private void bandBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bandBActionPerformed
    {//GEN-HEADEREND:event_bandBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(57);
            if(bandB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_bandBActionPerformed

    private void choirAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_choirAActionPerformed
    {//GEN-HEADEREND:event_choirAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(58);
            if(choirA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_choirAActionPerformed

    private void choirBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_choirBActionPerformed
    {//GEN-HEADEREND:event_choirBActionPerformed
       try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(59);
            if(choirB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_choirBActionPerformed

    private void danceAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_danceAActionPerformed
    {//GEN-HEADEREND:event_danceAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(60);
            if(danceA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_danceAActionPerformed

    private void danceBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_danceBActionPerformed
    {//GEN-HEADEREND:event_danceBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(61);
            if(danceB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_danceBActionPerformed

    private void orchAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_orchAActionPerformed
    {//GEN-HEADEREND:event_orchAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(62);
            if(orchA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_orchAActionPerformed

    private void orchBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_orchBActionPerformed
    {//GEN-HEADEREND:event_orchBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(63);
            if(orchB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_orchBActionPerformed

    private void theaterAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_theaterAActionPerformed
    {//GEN-HEADEREND:event_theaterAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(64);
            if(theaterA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_theaterAActionPerformed

    private void theaterBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_theaterBActionPerformed
    {//GEN-HEADEREND:event_theaterBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(65);
            if(theaterB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_theaterBActionPerformed

    private void lang1AActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lang1AActionPerformed
    {//GEN-HEADEREND:event_lang1AActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(66);
            if(lang1A.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_lang1AActionPerformed

    private void lang1BActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lang1BActionPerformed
    {//GEN-HEADEREND:event_lang1BActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(67);
            if(lang1B.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_lang1BActionPerformed

    private void lang2AActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lang2AActionPerformed
    {//GEN-HEADEREND:event_lang2AActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(68);
            if(lang2A.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_lang2AActionPerformed

    private void lang2BActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_lang2BActionPerformed
    {//GEN-HEADEREND:event_lang2BActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(69);
            if(lang2B.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_lang2BActionPerformed

    private void commActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_commActionPerformed
    {//GEN-HEADEREND:event_commActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(70);
            if(comm.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_commActionPerformed

    private void TOKAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_TOKAActionPerformed
    {//GEN-HEADEREND:event_TOKAActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(71);
            if(TOKA.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_TOKAActionPerformed

    private void TOKBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_TOKBActionPerformed
    {//GEN-HEADEREND:event_TOKBActionPerformed
        try{
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File("newfile.xlsx")));
            XSSFSheet sheet = workbook.getSheetAt(0);
            XSSFRow row = sheet.getRow(rowSelected);
            XSSFCell cell = row.createCell(72);
            if(TOKB.isSelected())
            {
                cell.setCellValue(chx);
            }
            else
            {
                cell.setCellValue("");
            }
	    workbook.write(new FileOutputStream(new File("newfile.xlsx")));
        } catch(Exception e){System.out.println(e);}
    }//GEN-LAST:event_TOKBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ViewGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ViewGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ViewGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ViewGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ViewGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CENTA;
    private javax.swing.JCheckBox CENTB;
    private javax.swing.JCheckBox CMhlthA;
    private javax.swing.JCheckBox CMhlthB;
    private javax.swing.JCheckBox COS1A;
    private javax.swing.JCheckBox COS1B;
    private javax.swing.JCheckBox COS1C;
    private javax.swing.JCheckBox ECON;
    private javax.swing.JCheckBox HLTH;
    private javax.swing.JCheckBox HOAA;
    private javax.swing.JCheckBox HOAB;
    private javax.swing.JCheckBox HSA;
    private javax.swing.JCheckBox HSB;
    private javax.swing.JCheckBox HSCIA;
    private javax.swing.JCheckBox HSCIB;
    private javax.swing.JCheckBox TOKA;
    private javax.swing.JCheckBox TOKB;
    private javax.swing.JCheckBox WGA;
    private javax.swing.JCheckBox WGB;
    private javax.swing.JCheckBox WHA;
    private javax.swing.JCheckBox WHB;
    private javax.swing.JCheckBox alg2A;
    private javax.swing.JCheckBox alg2B;
    private javax.swing.JCheckBox algA;
    private javax.swing.JCheckBox algB;
    private javax.swing.JCheckBox artA;
    private javax.swing.JCheckBox artB;
    private javax.swing.JCheckBox athA;
    private javax.swing.JCheckBox athB;
    private javax.swing.JCheckBox bandA;
    private javax.swing.JCheckBox bandB;
    private javax.swing.JCheckBox bioA;
    private javax.swing.JCheckBox bioB;
    private javax.swing.JCheckBox chemA;
    private javax.swing.JCheckBox chemB;
    private javax.swing.JCheckBox choirA;
    private javax.swing.JCheckBox choirB;
    private javax.swing.JCheckBox comm;
    private javax.swing.JCheckBox danceA;
    private javax.swing.JCheckBox danceB;
    private javax.swing.JCheckBox eng1A;
    private javax.swing.JCheckBox eng1B;
    private javax.swing.JCheckBox eng2A;
    private javax.swing.JCheckBox eng2B;
    private javax.swing.JCheckBox eng3A;
    private javax.swing.JCheckBox eng3B;
    private javax.swing.JCheckBox eng4A;
    private javax.swing.JCheckBox eng4B;
    private javax.swing.JCheckBox geomA;
    private javax.swing.JCheckBox geomB;
    private javax.swing.JCheckBox hlA;
    private javax.swing.JCheckBox hlB;
    private javax.swing.JCheckBox hlC;
    private javax.swing.JButton jButton1;
    private javax.swing.JDialog jDialoge;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jtData;
    private javax.swing.JCheckBox lang1A;
    private javax.swing.JCheckBox lang1B;
    private javax.swing.JCheckBox lang2A;
    private javax.swing.JCheckBox lang2B;
    private javax.swing.JLabel lblArts;
    private javax.swing.JLabel lblAth;
    private javax.swing.JLabel lblEng;
    private javax.swing.JLabel lblHealth;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblLang;
    private javax.swing.JLabel lblMath;
    private javax.swing.JLabel lblSS;
    private javax.swing.JLabel lblSci;
    private javax.swing.JLabel lblSpeech;
    private javax.swing.JLabel lblTOK;
    private javax.swing.JLabel lblTech;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenuItem mnuCreateDataSheet;
    private javax.swing.JMenuItem mnuImport;
    private javax.swing.JCheckBox orchA;
    private javax.swing.JCheckBox orchB;
    private javax.swing.JPanel panChooser;
    private javax.swing.JCheckBox s3A;
    private javax.swing.JCheckBox s3B;
    private javax.swing.JCheckBox s3C;
    private javax.swing.JCheckBox s4A;
    private javax.swing.JCheckBox s4B;
    private javax.swing.JCheckBox s4C;
    private javax.swing.JCheckBox slA;
    private javax.swing.JCheckBox slB;
    private javax.swing.JCheckBox techA;
    private javax.swing.JCheckBox techB;
    private javax.swing.JCheckBox theaterA;
    private javax.swing.JCheckBox theaterB;
    private javax.swing.JTextField txtSearchBar;
    // End of variables declaration//GEN-END:variables
}
